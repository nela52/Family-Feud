package com.alexnelson.ff;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;

public class FamilyFued extends Canvas implements Runnable
{
	private static final long serialVersionUID = -5636455297197163180L;

	public static final int WIDTH = 1920, HEIGHT = 1080;

	private Thread thread;

	private boolean running = false;

	private BufferedImage intro = null;
	private BufferedImage background = null;
	private BufferedImage textBox = null;

	public static String name = "";
	public static boolean ef2n = false;
	public static boolean rEF = true;

	public static String family1Name = "";
	public static String family2Name = "";

	public static String personName = "";

	public static ArrayList<String> family1Names = new ArrayList<String>();
	public static ArrayList<String> family2Names = new ArrayList<String>();

	public static Family family1;
	public static Family family2;

	public static ArrayList<String> usedFamily1 = new ArrayList<String>();
	public static ArrayList<String> usedFamily2 = new ArrayList<String>();

	public static ArrayList<String> usedBuzzerFamily1 = new ArrayList<String>();
	public static ArrayList<String> usedBuzzerFamily2 = new ArrayList<String>();

	public static String buzzerMember1 = "";
	public static String buzzerMember2 = "";

	public static Stage stage = Stage.INTRO;

	public static Round round;

	public static ArrayList<Question> questions = new ArrayList<Question>();

	public static String questionsDir = System.getProperty("user.home") + File.separatorChar + "Desktop";

	public static ArrayList<String> lines = new ArrayList<String>();

	private static Font font;

	public void init()
	{
		BufferedImageLoader loader = new BufferedImageLoader();
		try
		{
			intro = loader.loadImage("/intro.png");
			background = loader.loadImage("/background.png");
			textBox = loader.loadImage("/textBox.png");
		} catch (IOException e)
		{
			e.printStackTrace();
		}

		try
		{
			font = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream("/clarenbd.ttf"));
		} catch (FontFormatException | IOException e)
		{
			e.printStackTrace();
		}

		font = font.deriveFont(72F);
	}

	public FamilyFued()
	{
		addKeyListener(new KeyInput());

		new Window(WIDTH, HEIGHT, "Family Feud", this);

		loadQuestions();

		round = new Round();
	}

	public synchronized void start()
	{
		thread = new Thread(this);
		thread.start();
		running = true;
	}

	public synchronized void stop()
	{
		try
		{
			thread.join();
			running = false;
		} catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	public synchronized void run()
	{
		requestFocus();
		init();
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int frames = 0;
		int ticks = 0;
		while (running)
		{
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while (delta >= 1)
			{
				tick();
				ticks++;
				delta--;
			}

			if (running)
			{
				render();
			}

			frames++;

			if (System.currentTimeMillis() - timer > 1000)
			{
				timer += 1000;
				//System.out.println("FPS: " + frames + ", Ticks: " + ticks);
				ticks = 0;
				frames = 0;
			}
		}
		stop();
	}

	private void tick()
	{
		if (round != null)
		{
			if (!round.isStarted())
			{
				return;
			}

			round.tick();
		}
	}

	private void render()
	{
		BufferStrategy bs = getBufferStrategy();
		if (bs == null)
		{
			createBufferStrategy(3);
			return;
		}

		Graphics g = bs.getDrawGraphics();

		g.clearRect(0, 0, WIDTH, HEIGHT);

		g.setColor(Color.white);
		g.setFont(font);

		if (rEF)
		{
			g.drawImage(intro, 0, 0, this);

			if (stage == Stage.INTRO)
			{
				drawHorizontalCenteredString(g, "Enter Family 1 Name:", new Rectangle(0, 0, 1920, 1080), 685, font);
			}

			if (stage == Stage.FAMILY1)
			{
				drawHorizontalCenteredString(g, "Enter " + family1Name + " Members:", new Rectangle(0, 0, 1920, 1080), 685, font);
			}

			if (stage == Stage.AF2)
			{
				drawHorizontalCenteredString(g, "Enter Family 2 Name:", new Rectangle(0, 0, 1920, 1080), 685, font);
			}

			if (stage == Stage.FAMILY2)
			{
				drawHorizontalCenteredString(g, "Enter " + family2Name + " Members:", new Rectangle(0, 0, 1920, 1080), 685, font);
			}

			g.drawImage(textBox, 550, 710, this);
		} else
		{
			g.drawImage(background, 0, 0, this);
		}

		g.setColor(Color.black);

		g.drawString(name, 555, 780);

		g.drawString(personName, 555, 780);

		if (round != null)
		{
			if (round.isStarted())
			{
				round.render(g, this);
			}
		}

		g.dispose();
		bs.show();
	}

	public static void drawCenteredString(Graphics g, String text, Rectangle rect, Font font)
	{
		// Get the FontMetrics
		FontMetrics metrics = g.getFontMetrics(font);
		// Determine the X coordinate for the text
		int x = (rect.width - metrics.stringWidth(text)) / 2;
		// Determine the Y coordinate for the text (note we add the ascent, as in java 2d 0 is top of the screen)
		int y = ((rect.height - metrics.getHeight()) / 2) + metrics.getAscent();
		// Set the font
		g.setFont(font);
		// Draw the String
		g.drawString(text, x, y);
		// Dispose the Graphics
		g.dispose();
	}

	public static void drawHorizontalCenteredString(Graphics g, String text, Rectangle rect, int y, Font font)
	{
		// Get the FontMetrics
		FontMetrics metrics = g.getFontMetrics(font);
		// Determine the X coordinate for the text
		int x = (rect.width - metrics.stringWidth(text)) / 2;
		// Set the font
		g.setFont(font);
		// Draw the String
		g.drawString(text, x, y);
		// Dispose the Graphics
		//g.dispose();
	}

	public static void drawVerticalCenteredString(Graphics g, String text, Rectangle rect, int x, Font font)
	{
		// Get the FontMetrics
		FontMetrics metrics = g.getFontMetrics(font);
		// Determine the Y coordinate for the text (note we add the ascent, as in java 2d 0 is top of the screen)
		int y = ((rect.height - metrics.getHeight()) / 2) + metrics.getAscent();
		// Set the font
		g.setFont(font);
		// Draw the String
		g.drawString(text, x, y);
		// Dispose the Graphics
		g.dispose();
	}

	public static void drawRightAlinedString(Graphics g, String text, int padding, int y)
	{
		int total_width = 1920;
		int actual_width = g.getFontMetrics().stringWidth(text);
		int x = total_width - actual_width - padding;
		g.drawString(text, x, y);
	}

	public static void addFamalies()
	{
		family1 = new Family(family1Name);
		for (String member : family1Names)
		{
			family1.addMember(member);
		}

		family2 = new Family(family2Name);
		for (String member : family2Names)
		{
			family2.addMember(member);
		}
	}

	public static void startRound()
	{
		stage = Stage.BUZZER;
		round.start();
		getBuzzerMembers();
		round.setBuzzerMember1(buzzerMember1);
		round.setBuzzerMember2(buzzerMember2);
	}

	public static void getBuzzerMembers()
	{
		if (usedBuzzerFamily1.size() == family1.getMembers().size())
		{
			usedBuzzerFamily1.clear();
		}

		for (String member : family1.getMembers())
		{
			if (!usedBuzzerFamily1.contains(member))
			{
				buzzerMember1 = member;
				usedBuzzerFamily1.add(member);
				break;
			}
		}

		if (usedBuzzerFamily2.size() == family2.getMembers().size())
		{
			usedBuzzerFamily2.clear();
		}

		for (String member : family2.getMembers())
		{
			if (!usedFamily2.contains(member))
			{
				buzzerMember2 = member;
				usedBuzzerFamily2.add(member);
				break;
			}
		}
	}

	static int currentFam1Member = 0;

	public static String getFamily1Member()
	{
		String person = null;

		if (currentFam1Member >= family1.getMembers().size())
		{
			currentFam1Member = 0;
		}

		person = family1.getMembers().get(currentFam1Member);

		System.out.println(person);

		currentFam1Member++;

		return person;
	}

	static int currentFam2Member = 0;

	public static String getFamily2Member()
	{
		String person = null;

		if (currentFam2Member >= family2.getMembers().size())
		{
			currentFam2Member = 0;
		}

		person = family2.getMembers().get(currentFam2Member);

		currentFam2Member++;

		return person;
	}

	public static ArrayList<String> loadTextFile(String path, String name) throws IOException
	{
		ArrayList<String> lines = new ArrayList<String>();

		BufferedReader br = new BufferedReader(new FileReader(new File(path, name)));
		try
		{
			StringBuilder sb = new StringBuilder();
			String line = br.readLine();

			while (line != null)
			{
				lines.add(line);
				sb.append(line);
				sb.append(System.lineSeparator());
				line = br.readLine();
			}
		} finally
		{
			br.close();
		}

		return lines;
	}

	public static void loadQuestions()
	{
		try
		{
			for (String line : loadTextFile(questionsDir, "Family Fued.txt"))
			{
				lines.add(line);
			}
		} catch (IOException e)
		{
			e.printStackTrace();
		}

		for (int i = 0; i < lines.size(); i++)
		{
			String line = lines.get(i);

			if (line.isEmpty())
			{
				continue;
			}

			if (line.endsWith("?") || line.endsWith("."))
			{
				String q = line;

				Question question = new Question(q);

				ArrayList<Answer> answers = new ArrayList<Answer>();
				for (int j = i + 1; j < 100; j++)
				{
					if (lines.get(j).isEmpty())
					{
						break;
					}

					String answerLine = lines.get(j);

					String answer = "";
					int points = 0;
					for (String part : answerLine.split(" "))
					{
						if (!isNumber(part))
						{
							answer = answer + " " + part;
						} else
						{
							points = Integer.parseInt(part);
						}
					}

					answers.add(new Answer(answer.trim(), points));
				}

				for (Answer answer : answers)
				{
					question.addAnswer(answer);
				}

				questions.add(question);
			}
		}

		ArrayList<Question> badQs = new ArrayList<Question>();
		for (Question question : questions)
		{
			if (question.getAnswers().isEmpty())
			{
				badQs.add(question);
			}
		}

		for (Question question : badQs)
		{
			questions.remove(question);
		}
	}

	public static boolean isNumber(String string)
	{
		try
		{
			Integer.parseInt(string);
		} catch (NumberFormatException e)
		{
			return false;
		}

		return true;
	}

	public static synchronized void playSound(final String name)
	{
		new Thread(new Runnable()
		{
			// The wrapper thread is unnecessary, unless it blocks on the
			// Clip finishing; see comments.
			public void run()
			{
				try
				{
					Clip clip = AudioSystem.getClip();
					AudioInputStream inputStream = AudioSystem.getAudioInputStream(getClass().getResourceAsStream("/" + name));
					clip.open(inputStream);
					clip.start();
				} catch (Exception e)
				{
					System.err.println(e.getMessage());
				}
			}
		}).start();
	}

	public static Font getTTFont()
	{
		return font;
	}

	public static void main(String[] args) throws IOException
	{
		new FamilyFued();
	}
}